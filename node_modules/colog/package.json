{
  "name": "colog",
  "version": "1.0.2",
  "description": "colog - console log with colors",
  "main": "index.js",
  "scripts": {
    "test": "nodeunit ./tests/tests.js",
    "example": "node ./bin/examples.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/dariuszp/colog.git"
  },
  "devDependencies": {
    "nodeunit": "*"
  },
  "keywords": [
    "cli",
    "console",
    "log",
    "colors",
    "color",
    "colog"
  ],
  "author": {
    "name": "Półtorak Dariusz",
    "email": "poltorak.dariusz@gmail.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/dariuszp/colog/issues"
  },
  "readme": "#colog [![Build Status](https://travis-ci.org/dariuszp/colog.png?branch=1.0.0)](https://travis-ci.org/dariuszp/colog)\n\n##v1.0.1\n\n* colog should work also outside tty\n* clear line return colog object\n\n##v1.0.2\n\n* Silence mode for colog.\n\nSilence mode\n```JavaScript\ncolog.silent(true); // colog will not print anything to stdout. From this point you should use console.log() or something else.\ncolog.silent(false); // default mode\n```\n\n##v1.0.0\n\n*Changes:*\n\n* tests in progress\n* code improvements\n\n*Changes:*\n\n* progress bar rewriten\n* mutliple optimalizations\n* and tests\n* .format() now works like .format() from JavaScript but with colors and stuff so you can use %s and pass parameters\n\ncolog.format('My name is %s and I\\'m %d', 'Earl', 45);\n\nWARNING: in 0.2.0 progress bar changed, adjust your code if you want to use this version\n* colog.progress(5000, 10000); - to init bar with 40 bars and values 5000 / 10000. Default is 0 / 100.\n* colog.progress(); - to increase bar by 1;\n* colog.progress(5); - to increase bar by 5;\n\nStatus method is added. Takes two arguments. Text for left and right side of the console. Can be formatted just like using .format(). Example:\n\ncolog.status('Module <b>message</b>', '<b>[OK]</b>');\n\n[OK] will be displayed at the right side of the window.\n\nNext version will have unit tests and travis support.\n\n*run \"npm run-script example\"* for more info and examples.\n\n##v0.1.7\nLicense file added. Library is under MIT license but no license file was provided with library. Fixing that.\n\n##v0.1.6\n\n*Changes:*\n\n* colog.dump(variable) added\n* colog.dump(variable, [ \"red\", \"bgGreen\" ] to apply effects to dump\n* colog.dump(function () { return 1; }); will display function code as text\n* docs added to methods\n* format now work with multiline strings\n\n##v0.1.5\n\n*Changes:*\n\nNow progress bar is included\n* colog.progress(20) to draw progress bar with twenty bars\n* colog.progress(20, 5) to draw progress bar with 5 filled bars and 15 \"empty\" bars\n* colog.progress(20, 5, ['bgGreen']) to draw progress bar with 5 filled bars and 15 \"empty\" bars and green background\n* colog.progress() to increase bar value so if you have 5 out of 20, you will have 6 out of 20\n* colog.progress(undefined, undefined, [ 'red' ]) to increase value by 1 and add change text to red\n* colog.configureProgress() to change way progress bar is displayed\n* colog.nl() or colog.newLine() is added. This print new line in console\n* colog.progress() return array with 2 elements, current and max value of progress\n\n\n##v0.1.4\n\n*Changes:*\nNow you can use color names without color prefix. So use\n* colog.red() instead of colog.colorRed()\n* colog.bgGreen() instead of colog.backgroundGreen();\n* colog.b() instead of colog.bold()\n\nSame with format() method:\n```Shell\nInstead of <colorGreen>This</colorGreen> <bold>is</bold> <backgroundRed>SPARTA!</backgroundRed>\nuse <green>This</green> <b>is</b> <bgRed>SPARTA!</bgRed>\n```\n\n\n##v0.1.3\n\nUse colors in your node.js console output\n\n###Installation\n\nIf you have Node.js and npm (Node Package Manager) installed, simply open console and type\n\n```Shell\nnpm install colog\n```\n\n###Usage\n\nTo use colog, add it to your project file\n\n```JavaScript\n'use strict';\n\nvar colog = require('colog');\n```\n\nThen you can start creating colorful output for your console:\n\n```JavaScript\ncolog.success('Up and running');\n```\n\nIf you did everything right, after you start your program like this:\n\n```Shell\nnode myApplication.js\n```\n\nYou should see green text \"Up and running\";\n\nFor more informations check [Wiki](https://github.com/dariuszp/colog/wiki) page for this project\n\n##Chatsheet\n\n####Predefined options:\n\n```JavaScript\ncolog.question('How are you ?');\n```\n\n*Full list*\n* info() - white text\n* success() - green text\n* warning() - yellow text\n* error() - red text\n* question() - cyan text\n* answer() - magenta text\n* headerInfo() - black text, white background\n* headerSuccess() - white text, green background\n* headerWarning() - black text, yellow background\n* headerError() - white text, red background\n* headerQuestion() - white text, cyan background\n* headerAnswer() - white text, magenta background\n\n####Applying colors, effects or background:\n\n```JavaScript\ncolog.log(colog.colorGreen('My text'));\ncolog.log(colog.backgroundGreen('My text'));\n```\n\n*Available options:*\n* bold()\n* underline()\n* strike() (draw line on the text)\n* inverse() (change background color with text color and vice versa)\n* colorBlack()\n* colorRed()\n* colorGreen()\n* colorYellow()\n* colorBlue()\n* colorMagenta()\n* colorCyan()\n* colorWhite()\n* backgroundBlack()\n* backgroundRed()\n* backgroundGreen()\n* backgroundYellow()\n* backgroundBlue()\n* backgroundMagenta()\n* backgroundCyan()\n* backgroundWhite()\n\n####Combining multiple effects:\n\n```JavaScript\ncolog.log(colog.underscore(colog.colorRed('My text')));\ncolog.log(colog.apply('My text', ['underscore', 'colorRed']));\ncolog.log(colog.color('My text', 'red') + colog.color('My text', 'green'));\ncolog.format('<question>How are you ?</question>');\ncolog.format('colog.format(<bold><colorRed>This</colorRed></bold> <underline><colorYellow>is</colorYellow></underline> <colorGreen>SPARTA</colorGreen><inverse>!</inverse>);');\ncolog.log(colog.format('<question>How are you ?</question>', false));\n```\n\n*All options that can be used as tags:*\nbold, underline, strike, inverse, colorBlack, colorRed, colorGreen, colorYellow, colorBlue, colorMagenta, colorCyan, colorWhite, backgroundBlack, backgroundRed, backgroundGreen, backgroundYellow, backgroundBlue, backgroundMagenta, backgroundCyan, backgroundWhite\n\n##Example output\n\n![Example](https://raw.github.com/dariuszp/colog/master/docs/colog.png)\n\nAuthor: Półtorak Dariusz <poltorak.dariusz@gmail.com>\nLicense: [MIT](http://opensource.org/licenses/MIT)\n",
  "readmeFilename": "README.md",
  "_id": "colog@1.0.2",
  "dist": {
    "shasum": "55d2e5f84805042313f04aba78e2aaa3d181ad51"
  },
  "_from": "colog@",
  "_resolved": "https://registry.npmjs.org/colog/-/colog-1.0.2.tgz"
}
